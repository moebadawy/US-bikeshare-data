import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york': 'new_york_city.csv',
              'washington': 'washington.csv' }
city_list = ['chicago', 'new york', 'washington']
month_list = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
days_list = ['all', 'saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday']


def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Please choose between: Chicago, New York, Washington: ')
    while True:
        if city.lower() in city_list:
            break
        else:
            print("please enter a valid city name")
            city = str(input("please enter city again: "))

    # TO DO: get user input for month (all, january, february, ... , june)
    month = str(input("please enter a month between January and June or All for no filter: "))
    while True:
        if month.lower() in month_list:
            break
        else:
            print("please enter a valid month")
            month = str(input("please enter month again: "))

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day = str(input("please enter a day or all for no filter: "))
    while True:
        if day.lower() in days_list:
            break
        else:
            print("please enter a valid day")
            day = str(input("please enter day again: "))

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city.lower()])
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    if month.lower() != 'all':
        df = df[df['Start Time'].dt.month_name() == month.title()]
    if day.lower() != 'all':
        df = df[df['Start Time'].dt.day_name() == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # TO DO: display the most common month
    df['month'] = df['Start Time'].dt.month_name()
    print('The most common month is: '+df['month'].mode()[0])
    # TO DO: display the most common day of week
    df['day'] = df['Start Time'].dt.day_name()
    print('The most common day of week is: '+df['day'].mode()[0])
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    print( 'The most common start hour is: %s' % df['hour'].mode()[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    # TO DO: display most commonly used start station
    print('The most commonly used start station is ' + df['Start Station'].mode()[0])
    # TO DO: display most commonly used end station
    print('The most commonly used end station is ' + df['End Station'].mode()[0])
    # TO DO: display most frequent combination of start station and end station trip
    df['Combination'] = df['Start Station'] + df['End Station']
    print('The most frequent combination of start station and end station trip is: ' + df['Combination'].mode()[0])
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

    
def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display total travel time
    print('The total travel time is %s seconds' % df['Trip Duration'].sum())
    # TO DO: display mean travel time
    print('The mean travel time is %s seconds' % df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()
    # TO DO: Display counts of user types
    print('Counts of user types is the following')
    print(df['User Type'].value_counts())

    # TO DO: Display counts of gender
    if 'Gender' in df.columns:
        print('Counts of gender is the following')
        print(df['Gender'].value_counts())
    else:
        print('This city has no gender information')

    # TO DO: Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df.columns:
        print('the most recent birth year is %s' % df['Birth Year'].max())
        print('the earliest birth year is %s' % df['Birth Year'].min())
        print('the most commom birth year is %s' % df['Birth Year'].mode()[0])
    else:
        print('This city has no birth year information')
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
def display_raw_data(df):
    """ To display the first five lines of data"""
    i=0
    raw = input('Would you like to view the first 5 rows of data yes/no ')
    pd.set_option('display.max_columns',200)
    while True:            
        if raw.lower() == 'no':
            break
        else: 
            raw.lower() == 'yes'
            print(df[i:i+5])
            raw = input("Do you want to view the next 5 rows ")
            i += 5

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)
        

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
